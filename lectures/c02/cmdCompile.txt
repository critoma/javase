Linux UBUNTU:

export JAVA_HOME=/opt/software/java/jdks/jdk1.8.0_161
export PATH=$JAVA_HOME/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
export CLASSPATH=.:$JAVA_HOME/jre/lib
export JSE=/home/stud/javase/lectures

cd $JSE/c02/src
// ##############################################################################


// ------------------------------------------------------------------------------

# A. Student Sample in Java (non-OOP):
javac eu/ase/arrays/ProgMainArrays.java

java eu/ase/arrays/ProgMainArrays



// ##############################################################################

# B.Student sample in Java with OOP - simple and jLibs - JARs in command line:

# B.1 - Simple
javac eu/ase/ooparrays/Student.java
javac eu/ase/ooparrays/ProgMainOopArrays.java

java eu/ase/ooparrays/ProgMainOopArrays

# B.2 - full JAR deployment 
jar -cmvf ./META-INF/MANIFEST.MF ../student.jar eu/ase/ooparrays/*.class
rm eu/ase/ooparrays/*.class

java -jar ../student.jar eu/ase/ooparrays/ProgMainOopArrays
rm ../student.jar

# B.3 - the Java lib - JAR:
javac eu/ase/ooparrays/Student.java
jar -cvf ../studentLib.jar eu/ase/ooparrays/Student.class


javac eu/ase/ooparrays/ProgMainOopArrays.java
rm eu/ase/ooparrays/Student.class

javac -cp ../studentLib.jar eu/ase/ooparrays/ProgMainOopArrays.java

java -classpath .:../studentLib.jar eu/ase/ooparrays/ProgMainOopArrays

rm eu/ase/ooparrays/ProgMainOopArrays.class
rm ../studentLib.jar



# B.4 - the Java modules from JAR:
# https://dzone.com/articles/java-9-modular-development-part-2
# http://tutorials.jenkov.com/java/modules.html

export JAVA_HOME=/opt/software/java/jdks/jdk-11
export PATH=$JAVA_HOME/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games

cd /home/stud/javase/lectures/c02/modules/s02_jmod_student/src
javac -d ../mods eu/ase/oopmodules/Student.java ./module-info.java

cd ../mods 
javap module-info.class

#jar -cvf ../../s02_jmoduse_arraystudent/libmod/student.jar eu/ase/oopmodules/Student.class module-info.class
jar -cvf ./student.jar eu/ase/oopmodules/Student.class module-info.class

rm -rf eu
rm module-info.class
mkdir -p ../../s02_jmoduse_arraystudent/libmod
cp student.jar ../../s02_jmoduse_arraystudent/libmod/student.jar


jmod create --class-path ./student.jar s02_jmod_student.jmod
rm student.jar

jmod describe s02_jmod_student.jmod
jmod list s02_jmod_student.jmod
jmod extract s02_jmod_student.jmod
rm -rf classes

jlink --module-path .:$JAVA_HOME/jmods --add-modules s02_jmod_student --output ./out-standalone-jvm11


cd /home/stud/javase/lectures/c02/modules/s02_jmoduse_arraystudent/src
javac --module-path .:../libmod eu/ase/usejmodooparrays/ProgMainUseJModsOppArrays.java module-info.java
java --module-path .:../libmod --module s02_jmoduse_arraystudent/eu.ase.usejmodooparrays.ProgMainUseJModsOppArrays

rm ../libmod/student.jar
/home/stud/javase/lectures/c02/modules/s02_jmod_student/mods/out-standalone-jvm11/bin/java --module-path . --module s02_jmoduse_arraystudent/eu.ase.usejmodooparrays.ProgMainUseJModsOppArrays

jimage list /home/stud/javase/lectures/c02/modules/s02_jmod_student/mods/out-standalone-jvm11/lib/modules
jmod describe $JAVA_HOME/jmods/java.base.jmod
jmod list $JAVA_HOME/jmods/java.base.jmod

rm -rf /home/stud/javase/lectures/c02/modules/s02_jmod_student/mods/out-standalone-jvm11
rm -rf /home/stud/javase/lectures/c02/modules/s02_jmod_student/mods/s02_jmod_student.jmod

# B.5 GraalVM (https://www.graalvm.org/docs/getting-started/):
#sudo apt-get install libz-dev
export GRAALVM_HOME=/opt/software/graalvm-ce-1.0.0-rc12
export PATH=$GRAALVM_HOME/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
export CLASSPATH=.:$JAVA_HOME/jre/lib
export JSE=/home/stud/javase/lectures

cd $JSE/c02/graalvm

javac eu/ase/arrays/ProgMainArrays.java
java eu.ase.arrays.ProgMainArrays

native-image eu.ase.arrays.ProgMainArrays
./eu.ase.arrays.progmainarrays

rm eu/ase/arrays/*.class
rm eu.ase.arrays.progmainarrays

#// ##############################################################################

export JAVA_HOME=/opt/software/java/jdks/jdk1.8.0_161
export PATH=$JAVA_HOME/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games
export JSE=/home/stud/javase/lectures
cd $JSE/c02

# C. Apache ANT
# https://ant.apache.org/manual/tutorial-HelloWorldWithAnt.html

export ANT_HOME=/opt/software/apache-ant-1.10.1
export PATH=$PATH:$ANT_HOME/bin

ant -version



# build.xml
<project>

    <target name="clean">
        <delete dir="build"/>
    </target>

    <target name="compile">
        <mkdir dir="build/classes"/>
        <javac srcdir="src" destdir="build/classes"/>
    </target>

    <target name="jar">
        <mkdir dir="build/jar"/>
        <jar destfile="build/jar/student.jar" basedir="build/classes">
            <manifest>
                <attribute name="Main-Class" value="eu.ase.ooparrays.ProgMainOopArrays"/>
            </manifest>
        </jar>
    </target>

    <target name="run">
        <java jar="build/jar/student.jar" fork="true"/>
    </target>

</project>


cd $JSE/c02/antproj

ant compile
ant jar
ant run

ant clean


// ##############################################################################

# D. Apache Maven - MVN

# https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html
# https://maven.apache.org/guides/getting-started/index.html
# https://www.tutorialspoint.com/maven/maven_build_test_project.htm

export MVN_HOME=/opt/software/apache-maven-3.5.2
export M2_HOME=/opt/software/apache-maven-3.5.2
export PATH=$PATH:$MVN_HOME/bin

cd $JSE/c02/mavenproj
mvn --version

mvn archetype:generate -DgroupId=eu.ase.ooparrays -DartifactId=my-app-student -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false

ls -latr /home/stud/.m2/repository
du -k -h ls /home/stud/.m2/repository

# output approx. 18MB

cd my-app-student
mvn clean 
mvn compile
mvn package

ls -latr /home/stud/.m2/repository
du -k -h ls /home/stud/.m2/repository

ls -latr /root/.m2/repository
du -k -h ls /root/.m2/repository

# output approx. 27 MB

java -classpath target/my-app-student-1.0-SNAPSHOT.jar eu.ase.ooparrays.App

// ##############################################################################

# E. Gradle
# https://gradle.org/install/
# https://gradle.org/install/
# https://github.com/jabedhasan21/java-hello-world-with-gradle
# https://www.tutorialspoint.com/gradle/index.htm
# https://www.tutorialspoint.com/gradle/gradle_build_a_java_project.htm

# https://github.com/jabedhasan21/java-hello-world-with-gradle/blob/master/README.md

export GRADLE_HOME=/opt/software/gradle-4.5
export PATH=$PATH:$GRADLE_HOME/bin

cd $JSE/c02/gradleproj
gradle -v

gradle -tasks
gradle -help

mkdir -p my-app-student/src/main/java/eu/ase/ooparrays
cd my-app-student


# gradle init

# in build.gradle file:
apply plugin: 'java'
apply plugin: 'application'

mainClassName = 'eu.ase.ooparrays.ProgMainOopArrays'

// tag::jar[]
jar {
    baseName = 'student-gradle'
    version =  '0.1.0'
}
// end::jar[]

// tag::dependencies[]
sourceCompatibility = 1.8
targetCompatibility = 1.8




gradle build

gradle run

java -classpath build/libs/student-gradle-0.1.0.jar eu.ase.ooparrays.ProgMainOopArrays


## git reset --hard head
#  git reset --hard master 
// ##############################################################################

# F. Jenkins - DevOps

export JAVA_HOME=/opt/software/java/jdks/jdk1.8.0_161
export CLASSPATH=.:$JAVA_HOME/jre/lib
export CATALINA_HOME=/opt/software/apache-tomcat-9.0.4
export PATH=.:$JAVA_HOME/bin:$CATALINA_HOME/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games

cd $CATALINA_HOME
bin/startup.sh

http://127.0.0.1:8080
http://127.0.0.1:8080/jenkins/


bin/shutdown.sh

// ##############################################################################

# G. Docker

https://hub.docker.com 

https://hub.docker.com/r/critoma/ubuntu-java-node-py-dev/ 



docker search critoma
# https://hub.docker.com/r/critoma/linux-ubuntu-dev-security-ism
docker pull critoma/linux-ubuntu-dev-security-ism
docker run -it critoma/linux-ubuntu-dev-security-ism

$ docker container ls -a

$ docker exec -it <container_id> /bin/bash
$ docker exec -u stud -t -i 0aa85c74361c /bin/bash

# deprecated:
# docker pull critoma/ubuntu-java-node-py-dev
# docker run -it critoma/ubuntu-java-node-py-dev

// ##############################################################################































// ##############################################################################

# ***. Create YOUR own Docker container - NOT necessary and totally optional
https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/#install-from-a-package

https://download.docker.com/linux/ubuntu/dists/xenial/pool/stable/amd64/

sudo dpkg -i /path/to/package.deb

sudo docker run hello-world



############
>terminal
cd /home/stud/kits/docker

sudo dpkg -i docker-ce_17.03.2~ce-0~ubuntu-xenial_amd64.deb

sudo docker run hello-world

docker --version


########
# Docker Hello World
########
# https://docs.docker.com/get-started/part2/#define-a-container-with-dockerfile
$ cd /home/stud/kits/docker/containerpy01

$ ls
app.py  Dockerfile  requirements.txt


$ sudo docker build -t friendlyhello .


$ sudo docker images
stud@stud-VirtualBoxU16x64:~/docker/containerpy01$ sudo docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
friendlyhello       latest              21199cdff011        3 minutes ago       148 MB
python              2.7-slim            4fd30fc83117        4 weeks ago         138 MB
hello-world         latest              f2a91732366c        7 weeks ago         1.85 kB



$ sudo docker run -p 4000:80 friendlyhello


$ sudo docker run -d -p 4000:80 friendlyhello


$ sudo docker container ls


$ sudo docker container stop 490f468f38fc


$ docker container ls -a

$ docker exec -it <container_id> /bin/bash
$ docker exec -u stud -t -i 0aa85c74361c /bin/bash


################################################

#--- Create docker Ubuntu 16 with Java 9 and 8, nodejs 6, Python 2 & 3, plus the usage from Dockhub:
# https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-16-04

# 1. Search the most correct ubuntu image:
sudo docker search ubuntu

# 2. Pull the ubuntu docker image (aprox 111 MB):
sudo docker pull ubuntu

# 3. See the Docker downloaded images:
sudo su
docker images
docker images -a

# 4. Run the ubuntu image interactive:
docker run -it ubuntu
# find the Ubuntu 16.04 LTS version - cat /etc/lsb-release

# 5. Install SDKs:
apt-get install wget
apt-get install xz-utils

cd /home
mkdir stud
mkdir kits
cd kits

 
# 5.1 Install nodejs 8.9:
wget https://nodejs.org/dist/v8.9.4/node-v8.9.4-linux-x64.tar.xz
mkdir /opt/nodejs89
tar -xvf node-v8.9.4-linux-x64.tar.xz
mv node-v8.9.4-linux-x64 /opt/software/
/opt/software/node-v8.9.4-linux-x64/bin/node -v



# 5.2 Install Java 8 & 9:
# https://www.digitalocean.com/community/tutorials/how-to-install-java-with-apt-get-on-ubuntu-16-04
# https://stackoverflow.com/questions/10268583/downloading-java-jdk-on-linux-via-wget-is-shown-license-page-insteadx

# UPDATED FOR JDK 9 it looks like you can download it now directly from java.net without sending a header

wget -c --header "Cookie: oraclelicense=accept-securebackup-cookie" http://download.oracle.com/otn-pub/java/jdk/9.0.4+11/c2514751926b4512b076cc82f959763f/jdk-9.0.4_linux-x64_bin.tar.gz

# UPDATED FOR JDK 8u151 TAR GZ:
# Downloading Java from the command line has always been troublesome. What I have been doing reciently is to use FireFox (other browsers might work) to get a download started on my laptop, pause it (within the Downloads windows), use the "Copy Download Link" menu item of the context menu displayed for the downloading file. This URL can then be used on the Linux box to download the same file. I expect the URL has a short time to live. Ugly, but generally successful.

wget --no-check-certificate -c --header "Cookie: oraclelicense=accept-securebackup-cookie" http://download.oracle.com/otn-pub/java/jdk/8u161-b12/2f38c3b165be4555a1fa6e98c45e0808/jdk-8u161-linux-x64.tar.gz




cd /home/kits
tar -xvf jdk-8u161-linux-x64.tar.gz
mv jdk1.8.0_161 /opt/software/java/jdks/

tar -xvf jdk-9.0.4_linux-x64_bin.tar.gz
mv jdk-9.0.4 /opt/software/java/jdks/




# 5.3 Download Python 2 & 3:
#Python 2:
apt-get update \
    && apt-get upgrade -y \
    && apt-get install -y \
    build-essential \
    ca-certificates \
    gcc \
    git \
    libpq-dev \
    make \
    python-pip \
    python2.7 \
    python2.7-dev \
    ssh \
    && apt-get autoremove \
&& apt-get clean

pip install -U "setuptools==3.4.1"
pip install -U "pip==1.5.4"
pip install -U "Mercurial==2.9.1"
pip install -U "virtualenv==1.11.4"
pip install --upgrade pip

python --version
/usr/bin/python --version


# Python 3:
apt-get update
apt-get install -y python3-pip python3-dev
# cd /usr/local/bin
# ln -s /usr/bin/python3 python
pip3 install --upgrade pip

python3 --version
/usr/bin/python3 --version

# 5.4 Install ANT 1.10.1, Maven 3.5.2, Gradle 4.5, Apache Tomcat 9.0.4, Jenkins Generic WAR 2.89.3
cd /home/kits
wget http://archive.apache.org/dist/ant/binaries/apache-ant-1.10.1-bin.tar.xz
wget http://mirrors.m247.ro/apache/maven/maven-3/3.5.2/binaries/apache-maven-3.5.2-bin.tar.gz
wget https://services.gradle.org/distributions/gradle-4.5-bin.zip
wget http://apache.javapipe.com/tomcat/tomcat-9/v9.0.4/bin/apache-tomcat-9.0.4.tar.gz
wget http://mirrors.jenkins.io/war-stable/latest/jenkins.war

tar -xvf apache-ant-1.10.1-bin.tar.xz
tar -xvf apache-maven-3.5.2-bin.tar.gz
unzip gradle-4.5-bin.zip
tar -xvf apache-tomcat-9.0.4.tar.gz



# 6. Save the image of the Docker while the container is running in another terminal:

sudo su
docker ps -a

26050a3c4ac0        critoma/ubuntu-java

docker images -a

docker commit -m "Ubuntu 16.04 with Java 8 and 9, JS - NodeJS 8.9, Python 2.7 and 3" -a "Cristian Toma" 26050a3c4ac0 critoma/ubuntu-java-node-py-dev

docker commit -m "Ubuntu 16.04 with Java 8 and 9, JS - NodeJS 8.9, Python 2.7 and 3" -a "Cristian Toma" bd43ce572d1e ubuntu-java-node-py-dev

docker commit -m "Ubuntu 16.04 with Java 8 & 9, JS - NodeJS 8.9, Python 2.7 & 3, ANT 1.10.1, Maven 3.5.2, Gradle 4.5, Apache Tomcat 9.0.4, Jenkins Generic WAR 2.89.3, Git" -a "Cristian Toma" f2321a6bcf8b critoma/ubuntu-java-dev

# where bd43ce572d1e is the container ID from docker ps -a command





# 7. Upload the image into Docker Hub (4.2 GB):

# https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-16-04

# https://www.digitalocean.com/community/tutorials/how-to-remove-docker-images-containers-and-volumes#purging-all-unused-or-dangling-images,-containers,-volumes,-and-networks



# https://hub.docker.com/ 
# critoma / d...s
# c...v...@gmail.com


docker login -u critoma

docker tag 05214ce23aa6 critoma/ubuntu-java-node-py-dev:latest
docker push critoma/ubuntu-java-node-py-dev:latest




# ---- stop all containers, delete a specific container and delete older images:
# https://www.digitalocean.com/community/tutorials/how-to-remove-docker-images-containers-and-volumes#purging-all-unused-or-dangling-images,-containers,-volumes,-and-networks

# stop all containers:
docker stop $(docker ps -a -q)

# delete all containers
# docker rm $(docker ps -a -q)

# delete specific docker container:
docker ps -a
docker rm 26050a3c4ac0
docker rm 7b2153ffbc22
docker rm 4ab07e2b32a6

# delete specific image:
docker images -a
docker rmi fadd609f434d
docker rmi 2a4cca5ac898

# delete all images:
docker images -a
docker rmi $(docker images -a -q)

################################################






# 8. DOCKER image pull and Run interactively the image:

sudo docker search critoma
sudo docker pull critoma/ubuntu-java-node-py-dev
sudo docker run -it critoma/ubuntu-java-node-py-dev


# export the env variables:
# root@87ad522d7ace:/# echo $PATH
# /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

export NODEJS_HOME=/opt/software/node-v8.9.4-linux-x64
export JDK8_HOME=/opt/software/java/jdks/jdk1.8.0_161
export JDK9_HOME=/opt/software/java/jdks/jdk-9.0.4
export JAVA_HOME=$JDK8_HOME

export PATH=$PATH:.:$JAVA_HOME/bin:$NODEJS_HOME/bin

javac -version

java -version

node -v



### image stored on the machine Linux Ubuntu:
# https://stackoverflow.com/questions/19234831/where-are-docker-images-stored-on-the-host-machine
sudo du -h /var/lib/docker/aufs/diff | grep 1,9

# where java in /opt is stored:
sudo ls -latr /var/lib/docker/aufs/diff/4a7b93c1e6daffeca70a758b81b238a92ffa39d045db39aefb3094b259edf0aa/opt

# where nodejs in /opt is stored:
sudo ls -latr /var/lib/docker/aufs/diff/a74ef67573923ea5217a4befd0beb53f5e4fc6e22af0fb63da3d401ffa98a6fc/opt











###################################################################################################
---------------------------------------------------------------------------------------------------

# Start docker image and container from the configuration file:
# https://docs.docker.com/get-started/#test-docker-version

sudo su

cd /home/stud/kits/docker/
mkdir dockerpyimg

docker --version

docker info

docker run hello-world

docker image ls

docker container ls --all

touch Dockerfile

nano Dockerfile


####
### 1. Dockerfile:


# Use an official Python runtime as a parent image
FROM python:2.7-slim

# Set the working directory to /app
WORKDIR /app

# Copy the current directory contents into the container at /app
ADD . /app

# Install any needed packages specified in requirements.txt
RUN pip install --trusted-host pypi.python.org -r requirements.txt

# Make port 80 available to the world outside this container
EXPOSE 80

# Define environment variable
ENV NAME World

# Run app.py when the container launches
CMD ["python", "app.py"]



touch requirements.txt
nano requirements.txt

### 2. requirements.txt:
Flask
Redis



touch app.py
nano app.py

### 3. app.py:
from flask import Flask
from redis import Redis, RedisError
import os
import socket

# Connect to Redis
redis = Redis(host="redis", db=0, socket_connect_timeout=2, socket_timeout=2)

app = Flask(__name__)

@app.route("/")
def hello():
    try:
        visits = redis.incr("counter")
    except RedisError:
        visits = "<i>cannot connect to Redis, counter disabled</i>"

    html = "<h3>Hello {name}!</h3>" \
           "<b>Hostname:</b> {hostname}<br/>" \
           "<b>Visits:</b> {visits}"
    return html.format(name=os.getenv("NAME", "world"), hostname=socket.gethostname(), visits=visits)

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=80)

####





# Build the image and the app:

docker build -t friendlyhello .

docker image ls



# Run the image and the app:

docker run -p 4000:80 friendlyhello

docker run -p 4000:80 -it friendlyhello

# Run in the detached mode:
docker run -d -p 4000:80 friendlyhello

# in another terminal:
curl http://localhost:4000


# List Docker containers = instances of the images:
docker container ls

root@stud-VirtualBoxU16x64:/home/stud/kits/docker/dockerpyimg# docker container ls
CONTAINER ID        IMAGE               COMMAND             CREATED              STATUS              PORTS                  NAMES
f4f251a29643        friendlyhello       "python app.py"     About a minute ago   Up About a minute   0.0.0.0:4000->80/tcp   tender_pike
root@stud-VirtualBoxU16x64:/home/stud/kits/docker/dockerpyimg# 


# Stop Docker container:
docker container stop f4f251a29643


# Share your image:

docker login

docker images -a
docker container ps -all
# docker tag image username/repository:tag
docker tag friendlyhello critoma/get-started:part2

#docker push username/repository:tag
docker push critoma/get-started:part2

# https://cloud.docker.com/swarm/critoma/repository/list
# https://hub.docker.com/r/critoma/


# Pull and run the image from the remote repository
# stop all containers:
docker stop $(docker ps -a -q)

# delete all containers
# docker rm $(docker ps -a -q)

# delete all images:
docker images -a
docker images -a -q
docker rmi $(docker images -a -q)


# Pull and run the image from the remote repository:
# docker run -p 4000:80 username/repository:tag

docker run -p 4000:80 critoma/get-started:part2



###############
# *** Download and install Docker Composer in Linux:
# https://github.com/docker/compose/releases

curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose



# First docker-compose.yml file
touch docker-compose.yml

nano docker-compose.yml

##### docker-compose.yml file content:
version: "3"
services:
  web:
    # replace username/repo:tag with your name and image details
    image: critoma/get-started:part2
    deploy:
      replicas: 5
      resources:
        limits:
          cpus: "0.1"
          memory: 50M
      restart_policy:
        condition: on-failure
    ports:
      - "80:80"
    networks:
      - webnet
networks:
  webnet:


# Run your new load-balanced app:

docker swarm init

root@stud-VirtualBoxU16x64:/home/stud/kits/docker/dockerpyimg# docker swarm init
Swarm initialized: current node (t1aqjktzdsry2pf4tvr2kyy5q) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join \
    --token SWMTKN-1-4x7130zyfsjduawyijmfq9x5lpi8arfvyr5z9udlrwyjajx08k-2laqmr5s32w5s8njawd0srflx \
    10.0.2.15:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.



### Scale the app
docker stack deploy -c docker-compose.yml getstartedlab


docker service ls
docker service ps getstartedlab_web

docker container ls -q


# In another terminal:
curl -4 http://127.0.0.1


# Take down the app and the swarm:
docker stack rm getstartedlab

docker swarm leave --force

### Scale the app - reinit the swarm, redeploy the stack
docker swarm init
docker service ls

docker stack deploy -c docker-compose.yml getstartedlab
docker service ls
docker service ps getstartedlab_web




# docker run -p 80:80 critoma/get-started:part2











#######################################################################################
Resources:

https://www.tutorialspoint.com/docker/docker_architecture.htm 

https://www.tutorialspoint.com/docker/docker_containers_and_shells.htm

https://docs.docker.com/install/linux/docker-ce/ubuntu/ 

https://docs.docker.com/engine/installation/linux/linux-postinstall/ 

https://docs.docker.com/get-started/

https://docs.docker.com/get-started/part2/ 

https://docs.docker.com/get-started/part6/ 



https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-16-04 

https://www.digitalocean.com/community/tutorials/how-to-remove-docker-images-containers-and-volumes#purging-all-unused-or-dangling-images,-containers,-volumes,-and-networks 

https://www.digitalocean.com/community/tutorials/how-to-install-node-js-on-ubuntu-16-04 

http://fabiorehm.com/blog/2014/09/11/running-gui-apps-with-docker/ 

﻿https://github.com/fgrehm/docker-eclipse 

﻿http://fabiorehm.com/blog/2014/09/11/running-gui-apps-with-docker/  

﻿https://stackoverflow.com/questions/19234831/where-are-docker-images-stored-on-the-host-machine 



